#+TITLE: Emacs Twist User Documentation
#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: Twist: (emacs-twist)
#+TEXINFO_DIR_DESC: Build an Emacs configuration with Nix.
* Introduction
* System requirements
Twist depends on the Nix package manager.
Nix is currently supported on Linux and macOS.
For details, refer to the manual of Nix: https://nixos.org/manual/nix/stable/installation/supported-platforms.html

Also, the Nix package manager on your system must be version 2.4 or later.
To check the version of Nix, run the following command on terminal:

#+begin_src sh
nix --version
#+end_src

The command should print an output as follows:

#+begin_example
nix (Nix) 2.8.0pre20220411_f7276bc
#+end_example

If you don't have Nix, you can download it from here: https://nixos.org/download.html
* Installation
Before you use Twist on your machine, you may need an addditional configuration.
** Turn on Nix flakes
Twist is designed to use in a Nix flake.
Flakes are an experimental feature of Nix, and it is turned off by default.

To turn on the feature, follow the instruction in the following article: https://nixos.wiki/wiki/Flakes#Installing_flakes
** Add an access token to GitHub
Twist is a source-based build machinery.
It fetches package sources from upstream repositories with Nix.
As most Emacs Lisp packages are hosted on [[https://github.com/][GitHub]] nowadays, and GitHub imposes a rather strict rate limit (60 per hour) on API access, you are likely to be blocked from =api.github.com= when you use Twist.

To mitigate this issue, you can expand the rate limit by using authorized access to GitHub.
This will increase the rate limit to 5000 per hour, which is sufficient for normal use.

To enable authorized access to GitHub, you have to generate an access token on GitHub and add it to your =nix.conf=.
You need a GitHub account.

1. Log in to your GitHub account, go to [[https://github.com/settings/apps][Developer Settings]], and visit /Personal access tokens/.
2. Press /Generate new token/ button.
3. Set a note and expiration. Select =repo:status= and =public_repo=, and press /Generate token/ button.
4. Copy the token and add it to your =nix.conf=.

When you finish these steps, your =nix.conf= should contain a line as follows:

#+begin_src conf
  access-tokens = github.com=XXXXXX
#+end_src

For details on rate limiting on GitHub, refer to the following section in the GitHub Docs:
https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting

For details on scopes, refer to the following article in the GitHub Docs: [[https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps]]
* Initial configuration of a project
** Initializing from a template
To create a new configuration from scratch, you can use a template.
First, create an empty directory.
Then, run the following command in the directory:

#+begin_src sh
nix flake init -t github:emacs-twist/twist.nix
#+end_src

Now you can work on your configuration by adding =use-package= blocks to =init.el= in the repository.

Twist also provides some extra flexibility on configuration:

- Manage your configuration in an Org file
- Use an alternative utility other than =use-package=, like =setup.el=

Otherwise, you can skip the following subsections to start developing your configuration.
** Manual creation of a project boilerplate
Alternatively, if you already have an Emacs configuration built with Nix, you can migrate your configuration to Twist by tweaking your configuration.

This subsection assumes you have a flake for your Emacs configuration.
*** Create flake.nix
You must track your configuration in a Git repository, and the root directory of the repository must contain =flake.nix=.
It must follow the format of [[https://nixos.wiki/wiki/Flakes][Nix flakes]] as recognized by Nix.
You can run the following command to create a =flake.nix=:

#+begin_src sh
  nix flake init
#+end_src
*** Add flake inputs
To use Twist, you have to add =github:emacs-twist/twist.nix= to the inputs:

#+begin_src nix
  inputs.twist.url = "github:emacs-twist/twist.nix";
#+end_src

You will probably have to add the source repository of GNU Emacs.
This can be a mirror, so you can use the following:

#+begin_src nix
  inputs.emacs = {
    url = "github:emacs-mirror/emacs";
    flake = false;
  };
#+end_src

You also have to add flake inputs for inventories you use.
See [[#inventory-configuration][Inventory Configuration]] for details.
*** Create a lock directory
You have to create a directory for lock files.
The directory can be anywhere inside the repository, but not the root directory of the repository.

For example, if the directory is named =lock=, you can use the following commands:

#+begin_src sh
  mkdir -p lock
  touch lock/.keep
  git add lock/.keep
#+end_src

Note that the directory must not be empty.
It must be considered non-empty by Nix, so you have to create an empty file (e.g. =.keep=) in the directory and add it to the Git index.
*** Define flake outputs
With [[https://github.com/numtide/flake-utils][flake-utils]], the user can define flake outputs in the following boilerplate:

#+begin_src nix
  # Root of flake.nix
  {
    outputs = { self, nixpkgs, flake-utils, twist, ... } @ inputs:
      flake-utils.lib.eachDefaultSystem (
        system:
        let
          # Define variables here
          ...
        in rec {
          # Define packages and apps here
          packages = ...;
        };
      )
  }
#+end_src

It is also possible to use other libraries for the boilerplate.
If you want to track the Emacs configuration in the same repository as a NixOS/home-manager configuration, [[https://github.com/gytis-ivaskevicius/flake-utils-plus][flake-utils-plus]] is recommended, but it is not described in this manual.
**** Define a package
You can define a derivation for an Emacs configuration is as follows:

#+begin_src nix
  system: let
    pkgs = import nixpkgs {
      inherit system;
      overlays = [
        # Import an overlay from twist.nix
        twist.overlay
      ];
    };

    emacs = pkgs.emacsTwist {
      # Define your inventories here
      inventories = ...;
      # The path to the lock directory
      lockDir = ./lock;
      initFiles = [
        # Your Emacs initialization file.
        # For Org support, you will need an extra configuration
        ./init.el
      ];
    };
  in
    {
      # Define individual outputs here
      packages = ...;
      apps = ...;
    }
#+end_src

The package is a Nix derivation, so you can add it to the flake outputs:

#+begin_src nix
  packages = flake-utils.lib.flattenTree {
    inherit emacs;
    # Optional. Supported since Nix 2.7
    default = emacs;
  };
#+end_src
**** Derive apps for administration
You will also need apps to lock and update (ELPA) packages.
You can add these outputs as follows:

#+begin_src nix
  apps = emacs.makeApps {
    lockDirName = "lock";
  };
#+end_src

You have to set =lockDirName= to the path to the lock directory in string.
=makeApps= in the package defines all apps needed for maintenance, which can be run using =nix run= command.
** Inventory Configuration
:PROPERTIES:
:CUSTOM_ID: inventory-configuration
:END:
/Inventories/ are repositories from which Twist can discover information on Emacs Lisp packages.

In GNU Emacs, the user can install packages from package archives such as GNU ELPA, NonGNU ELPA, and MELPA.
Those archives serve pre-build files and tarballs which can be installed using =package.el=.

While Twist supports package archives, it is primarily intended for building packages from sources.
Twist somehow needs to discover the source repositories of packages the user wants to install, and those meta-repositories are called inventories.

Inventories must be passed to =pkgs.emacsTwist= function as =inventories= attribute.
The attribute is a list of attributes which corresponds to individual inventories:

#+begin_src nix
  emacs = pkgs.emacsTwist {
    inventories = [
      {
        type = "melpa";
        path = inputs.melpa.outPath + "/recipes";
        exclude = [
          "bbdb"
        ];
      }
      {
        type = "elpa";
        path = inputs.gnu-elpa.outPath + "/elpa-packages";
        core-src = inputs.emacs.outPath;
        auto-sync-only = true;
      }
      # More inventory definitions
    ];
    # More arguments passed to emacsTwist
  };
#+end_src
*** Supported inventories
The following types of inventories are supported:

- [[https://github.com/melpa/melpa][MELPA repository]] and its forks: The =recipes= directory which contains MELPA-style recipes.
- ELPA repository: The =elpa-packages= file of [[https://git.savannah.gnu.org/cgit/emacs/elpa.git/][GNU ELPA]] or [[https://git.savannah.gnu.org/cgit/emacs/nongnu.git/][NonGNU ELPA]] which defines a list of packages.
- Emacsmirror repository: The Git submodule list (=.gitmodules=) of [[https://github.com/emacsmirror/epkgs][emacsmirror/epkgs]].
- Remote package archive: The url of a pre-built package archive as supported by package.el.

Remote package archives are /impure/ inventories.
Nix needs to make a network connection to access those repositories, and the user has to run Nix with =--impure= flag when he/she perform the lock operation.

The other types of inventories are considered /pure/.
They are tracked as Nix flake inputs and locked to particular revisions themselves.
Twist can discover packages from those inventories without =--impure= flag, if the user's configuration doesn't involve impure inventories.

Once all packages in a configuration are locked, the user can build the configuration without =--impure= flag, which means the entire configuration is pure.
Every time the user adds a new package, he/she must perform the lock operation.
*** MELPA (pure)
*** ELPA (pure)
**** A recommended configuration for GNU ELPA
**** A recommended configuration for NonGNU ELPA
**** Core ELPA
*** Emacsmirror (pure)
*** Package archives (impure)
*** Options
**** name: Inventory name for pinning
**** exclude: Ignore particular packages
* Developing the configuration
* Tips
** Prefer building from sources
It is recommended to build a package from an upstream whenever possible.

This is because an archive can be deleted from its server when the package creates a new release:

#+begin_example
error: unable to download 'https://elpa.gnu.org/packages/vertico-0.18.tar': HTTP error 404 ('Not Found')

       response body:

       <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
       <html><head>
       <title>404 Not Found</title>
       </head><body>
       <h1>Not Found</h1>
       <p>The requested URL was not found on this server.</p>
       <hr>
       <address>Apache/2.4.51 (Debian) Server at elpa.gnu.org Port 443</address>
       </body></html>
#+end_example
* Limitations
** use-package-always-ensure option
[[https://github.com/jwiegley/use-package][use-package]] provides =use-package-always-ensure= option, which makes =package.el= install packages that have no =:ensure= option set:

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Unfortunately, Twist cannot handle this option well at the time of writing.

I have created an example configuration wrapping [[https://github.com/jkitchin/scimax][scimax]] with Twist:
https://github.com/emacs-twist/examples/blob/master/profiles/scimax/default.nix
Scimax enables the option and also have a number of custom packages.
Rather than pass init files to Twist, it relies on functions from the experimental =lib= output from Twist, to parse init files and get a list of built-in libraries.
Due to how the configuration is organized, the Twist profile requires a myriad of workarounds.

A better way is to *not* use =use-package-always-ensure= option.
Add =:ensure t= option explicitly to each declaration of a package you want to install.
This way, you can simply pass the init file to Twist and also have a choice of explicitly installing some GNU ELPA Core libraries (which are also part of built-in libraries) from the upstream.
